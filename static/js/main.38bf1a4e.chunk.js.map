{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","DeviceInformationCharacteristics","key","name","uuid","GatewayInfoCharacteristics","HotspotConfigurator","setStatus","classes","useState","device","setDevice","deviceInfo","setDeviceInfo","utf8decoder","TextDecoder","readCharacteristics","info","service","characteristics","a","async","char","console","log","getCharacteristic","c","readValue","v","decode","selectHotspot","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","gatt","connect","server","getPrimaryService","deviceService","gatewayService","message","alert","reset","disconnect","window","location","reload","infoListItems","charArray","map","value","index","length","ListItem","ListItemText","primary","secondary","divider","Box","AppBar","position","Toolbar","IconButton","className","color","aria-label","Typography","variant","onClick","List","dense","Button","showHotspotSelectorPanel","App","status","Container","maxWidth","Dialog","open","LinearProgress","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38bf1a4e.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport './App.css';\n\nimport {\n    AppBar,\n    Backdrop,\n    Box,\n    Button,\n    Container,\n    Dialog,\n    Divider,\n    Grid,\n    LinearProgress,\n    List,\n    ListItem,\n    ListItemText,\n    Paper,\n    Toolbar,\n    IconButton,\n    Typography,\n    ListItemSecondaryAction\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nconst UUID_GATEWAY_GATT_SERVICE = '0fda92b2-44a2-4af2-84f5-fa682baa2b8d';\nconst UUID_GATEWAY_GATT_CHAR_WIFI_SERVICES = \"d7515033-7e7b-45be-803f-c8737b171a29\";\nconst UUID_GATEWAY_GATT_CHAR_WIFI_SSID = \"7731de63-bc6a-4100-8ab1-89b2356b038b\";\nconst UUID_GATEWAY_GATT_CHAR_WIFI_CONNECT = \"398168aa-0111-4ec0-b1fa-171671270608\";\nconst UUID_GATEWAY_GATT_CHAR_MAC = \"9c4314f2-8a0c-45fd-a58d-d4a7e64c3a57\";\nconst UUID_GATEWAY_GATT_CHAR_PUBKEY = \"0a852c59-50d3-4492-bfd3-22fe58a24f01\";\nconst UUID_GATEWAY_GATT_CHAR_ONBOARDING_KEY = \"d083b2bd-be16-4600-b397-61512ca2f5ad\";\nconst UUID_GATEWAY_GATT_CHAR_ADD_GW = \"df3b16ca-c985-4da2-a6d2-9b9b9abdb858\";\nconst UUID_GATEWAY_GATT_CHAR_ASSERT_LOC = \"d435f5de-01a4-4e7d-84ba-dfd347f60275\";\nconst UUID_GATEWAY_GATT_CHAR_DIAGNOSTICS = \"b833d34f-d871-422c-bf9e-8e6ec117d57e\";\nconst UUID_GATEWAY_GATT_CHAR_LIGHTS = \"180efdef-7579-4b4a-b2df-72733b7fa2fe\";\n\nconst DeviceInformationCharacteristics = [\n    { key: \"manufacturer_name\", name: \"Manufacturer\", uuid: \"manufacturer_name_string\" },\n    /* { key: \"model_number\", name: \"Model Number\", uuid: \"model_number_string\"},*/\n    /*{ key: \"serial_number\", uuid: \"serial_number_string\"},*/\n    /* { key: \"hardware_revision\", name: \"Hardware Version\", uuid: \"hardware_revision_string\" }, */\n    { key: \"firmware_revision\", name: \"Firmware Version\", uuid: \"firmware_revision_string\"}\n]\nconst GatewayInfoCharacteristics = [\n    { key: \"wifi_ssid\", name: 'Wi-Fi SSID', uuid: UUID_GATEWAY_GATT_CHAR_WIFI_SSID},\n    { key: \"mac_addr\", name: 'MAC Address', uuid: UUID_GATEWAY_GATT_CHAR_MAC},\n    { key: \"public_key\", name: 'Public Key', uuid: UUID_GATEWAY_GATT_CHAR_PUBKEY},\n    { key: \"onboarding_key\", name: 'Onboarding Key', uuid: UUID_GATEWAY_GATT_CHAR_ONBOARDING_KEY}\n]\n\nfunction HotspotConfigurator({setStatus}) {\n    const classes = useStyles();\n\n    const [device, setDevice] = useState(null);\n    const [deviceInfo, setDeviceInfo] = useState(null);\n\n    let utf8decoder = new TextDecoder();\n    const readCharacteristics = async (info, service, characteristics) => {\n        for (const char of characteristics) {\n            console.log(\"Getting Char for: \" + char.uuid)\n            const c = await service.getCharacteristic(char.uuid);\n            const v = utf8decoder.decode(await c.readValue());\n            info[char.key] = v;\n        }\n    }\n    const selectHotspot = async () => {\n        try {\n            const info = {};\n            setStatus('Selecting device...');\n            console.log(\"Connecting to device...\");\n            const device = await navigator.bluetooth.requestDevice({filters: [{namePrefix: \"Helium Hotspot \"}], optionalServices: [\"device_information\", UUID_GATEWAY_GATT_SERVICE]});\n            console.log(device);\n            setDevice(device);\n\n            setStatus('Connecting to GATT Server...');\n            console.log('Connecting to GATT Server...');\n            const server = await device.gatt.connect();\n\n            setStatus('Getting Device Information Service...');\n            console.log('Getting Device Information Service...')\n            let deviceService = await server.getPrimaryService(\"device_information\");\n\n            setStatus('Reading DeviceInformationCharacteristics...');\n            await readCharacteristics(info, deviceService, DeviceInformationCharacteristics);\n\n            setStatus('Getting Gateway Service...');\n            console.log('Getting Gateway Service...');\n            const gatewayService = await server.getPrimaryService(UUID_GATEWAY_GATT_SERVICE);\n\n            setStatus('Reading GatewayInfoCharacteristics...');\n            await readCharacteristics(info, gatewayService, GatewayInfoCharacteristics);\n\n            console.log(info);\n\n            setDeviceInfo(info);\n            setStatus(null);\n        }\n        catch (error) {\n            console.log(error.message);\n            alert(error.message);\n            reset();\n        }\n    };\n    const reset = () => {\n        try {\n            device.gatt.disconnect();\n        } catch {}\n        setDevice(null);\n        setDeviceInfo(null);\n        window.location.reload()\n    };\n\n    const infoListItems = (info, charArray) => {\n        if (device == null || deviceInfo == null) return;\n        return charArray.map((value, index) => {\n            let val = info[value.key];\n            let lit = \"\";\n            if (val.length > 30) {\n                return <Fragment key={value.key + \"_fragment\"}>\n                    <ListItem key={value.key}>\n                        <ListItemText primary={value.name} secondary={info == null ? null : info[value.key]}/>\n                    </ListItem>\n                    <ListItem key={value.key + \"_divider\"} divider={true}/>\n                </Fragment>\n            } else {\n                return <Fragment key={value.key + \"_fragment\"}>\n                    <ListItem key={value.key}>\n                        <ListItemText primary={value.name} secondary={info == null ? null : info[value.key]}/>\n                    </ListItem>\n                    <ListItem key={value.key + \"_divider\"} divider={true}/>\n                </Fragment>\n            }\n        });\n    };\n\n    const showHotspotSelectorPanel = () => {\n        if (device == null) return <Fragment>\n            <ListItem>\n                <Box className=\"deviceSelectorPanel\">\n                    <Typography variant=\"h6\">Bluetooth Pairing Required</Typography>\n                    <Typography>Pair over Bluetooth to configure Hotspot settings.  Press the paring button on the Hotspot to continue.</Typography>\n                    <Button variant=\"contained\" color=\"primary\" onClick={selectHotspot}>Scan for Hotspots</Button>\n                </Box>\n            </ListItem>\n        </Fragment>\n\n    };\n    return (\n        <Box>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    {(device != null) && <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>}\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {(device == null)? \"Helium Hotspot Config\" : device.name}\n                    </Typography>\n                    {(device != null) && <IconButton color=\"inherit\" aria-label=\"menu\" onClick={reset}>\n                        <CloseIcon />\n                    </IconButton>}\n                </Toolbar>\n            </AppBar>\n            <List dense={true}>\n                {showHotspotSelectorPanel()}\n                {infoListItems(deviceInfo, DeviceInformationCharacteristics)}\n                {infoListItems(deviceInfo, GatewayInfoCharacteristics)}\n            </List>\n        </Box>\n    )\n}\n\nfunction App() {\n    const [status, setStatus] = useState(null);\n\n    return (\n        <Container maxWidth=\"xs\">\n            <Dialog open={!(status == null)} >\n                <Box>{status}</Box>\n                <LinearProgress />\n            </Dialog>\n            <HotspotConfigurator setStatus={setStatus} />\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}